# Manual deployment pipeline - builds and deploys from source
name: Deploy to Production
on:
  workflow_dispatch:
    inputs:
      build_sha:
        description: 'Git commit SHA to deploy (uses latest main build if empty)'
        required: false
        type: string
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production

jobs:
  deploy:
    name: Deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    concurrency: 
      group: deploy-${{ inputs.environment }}
      cancel-in-progress: false
    
    steps:
      - name: Determine build SHA
        id: build_sha
        run: |
          if [ -n "${{ inputs.build_sha }}" ]; then
            echo "sha=${{ inputs.build_sha }}" >> $GITHUB_OUTPUT
            echo "Using provided SHA: ${{ inputs.build_sha }}"
          else
            # Get latest main commit SHA
            LATEST_SHA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/commits/main" | \
              jq -r '.sha')
            echo "sha=$LATEST_SHA" >> $GITHUB_OUTPUT
            echo "Using latest main SHA: $LATEST_SHA"
          fi
      
      - name: Get workflow run ID for artifacts
        id: get_run_id
        run: |
          # Find the workflow run that built the artifacts for this SHA
          RUN_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/build.yml/runs?head_sha=${{ steps.build_sha.outputs.sha }}&status=success" | \
            jq -r '.workflow_runs[0].id')
          echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT
          echo "Found build run ID: $RUN_ID for SHA: ${{ steps.build_sha.outputs.sha }}"
      
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image-${{ steps.build_sha.outputs.sha }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          run-id: ${{ steps.get_run_id.outputs.run_id }}
      
      - name: Load Docker image
        run: |
          echo "Loading pre-built Docker image from artifact"
          docker load -i fit-tracker-${{ steps.build_sha.outputs.sha }}.tar.gz
          docker tag fit-tracker:${{ steps.build_sha.outputs.sha }} fit-tracker:latest
      
      - name: Setup Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master
          
      - name: Deploy to ${{ inputs.environment }}
        run: |
          # Deploy using the pre-built Docker image
          flyctl deploy --image fit-tracker:latest --strategy immediate
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
          
      - name: Deployment summary
        run: |
          echo "🚀 Successfully deployed to ${{ inputs.environment }}"
          echo "📝 Build SHA: ${{ steps.build_sha.outputs.sha }}"
          echo "🔗 App URL: https://$(flyctl info --json | jq -r '.Hostname')"
